name: Generate Release Notes from Git History

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      since_tag:
        description: 'Generate notes since this tag (e.g., v0.24.4)'
        required: false
        type: string
      target_version:
        description: 'Target version for the release (e.g., 0.24.10)'
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  generate-notes:
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Generate release notes from git history
        id: generate_notes
        run: |
          # Handle both manual and automatic triggers
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TARGET_VERSION="${{ github.event.inputs.target_version }}"
            SINCE_TAG="${{ github.event.inputs.since_tag }}"
          else
            # Auto-triggered by push - generate next version
            # Get the latest version tag (matching v*.*.* pattern)
            LATEST_TAG=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*' | sort -V | tail -1 || echo "v0.24.0")
            echo "Latest version tag: $LATEST_TAG"

            # Extract version and increment patch number
            LATEST_VERSION=${LATEST_TAG#v}
            IFS='.' read -r major minor patch <<< "$LATEST_VERSION"
            NEW_PATCH=$((patch + 1))
            TARGET_VERSION="$major.$minor.$NEW_PATCH"
            SINCE_TAG="$LATEST_TAG"
          fi

          # If no since_tag provided in manual mode, get the latest version tag
          if [ -z "$SINCE_TAG" ]; then
            SINCE_TAG=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*' | sort -V | tail -1 || echo "")
          fi

          # If no target_version provided in manual mode, auto-generate
          if [ -z "$TARGET_VERSION" ]; then
            LATEST_TAG=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*' | sort -V | tail -1 || echo "v0.24.0")
            LATEST_VERSION=${LATEST_TAG#v}
            IFS='.' read -r major minor patch <<< "$LATEST_VERSION"
            NEW_PATCH=$((patch + 1))
            TARGET_VERSION="$major.$minor.$NEW_PATCH"
          fi

          # Validate version format
          if ! [[ "$TARGET_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid version format: $TARGET_VERSION"
            exit 1
          fi

          echo "Generating release notes for v$TARGET_VERSION"
          echo "Since tag: $SINCE_TAG"

          # Create release notes header
          cat > /tmp/release_notes.md << 'EOF'
          ## What's Changed

          EOF

          # Get all commits since the last tag
          if [ -n "$SINCE_TAG" ]; then
            ALL_COMMITS=$(git log --oneline "$SINCE_TAG..HEAD")
          else
            ALL_COMMITS=$(git log --oneline HEAD~20..HEAD)
          fi

          # Helper function to add section if commits exist
          add_section() {
            local title="$1"
            local pattern="$2"
            local prefix="$3"
            
            # Extract commits matching pattern
            local commits=$(echo "$ALL_COMMITS" | grep -E "^[a-f0-9]+ $pattern" | sed "s/^[a-f0-9]* $prefix[^:]*: /- /" | sed 's/@.*//' || true)
            
            # Only add section if there are commits
            if [ -n "$commits" ]; then
              echo "### $title" >> /tmp/release_notes.md
              echo "$commits" >> /tmp/release_notes.md
              echo "" >> /tmp/release_notes.md
            fi
          }

          # Add sections only if they have content
          add_section "🚀 Features" "feat(\(|:)" "feat"
          add_section "🐛 Bug Fixes" "fix(\(|:)" "fix"
          add_section "🧰 Maintenance" "(chore|ci|build|refactor)(\(|:)" "(chore|ci|build|refactor)"
          add_section "📚 Documentation" "docs(\(|:)" "docs"
          add_section "🔐 Security" "security(\(|:)" "security"
          add_section "⚡ Performance" "perf(\(|:)" "perf"
          add_section "✅ Tests" "test(\(|:)" "test"

          # Add other commits section if there are any non-conventional commits
          OTHER_COMMITS=$(echo "$ALL_COMMITS" | grep -v -E "^[a-f0-9]+ (feat|fix|docs|refactor|perf|test|build|ci|style|chore|security)(\(|:)" || true)
          if [ -n "$OTHER_COMMITS" ]; then
            echo "### 📋 Other Changes" >> /tmp/release_notes.md
            echo "$OTHER_COMMITS" | sed 's/^[a-f0-9]* /- /' >> /tmp/release_notes.md
            echo "" >> /tmp/release_notes.md
          fi

          # If no changes at all, add a message
          if [ $(grep -c "^### " /tmp/release_notes.md || true) -eq 0 ]; then
            echo "No significant changes in this release." >> /tmp/release_notes.md
            echo "" >> /tmp/release_notes.md
          fi

          # Add installation instructions
          cat >> /tmp/release_notes.md << 'EOF'
          ## Installation

          ### HACS (Recommended)
          1. Add this repository as a custom repository in HACS
          2. Install "Meraki Dashboard" integration
          3. Restart Home Assistant

          ### Manual Installation
          1. Download the `meraki_dashboard.zip` file from the Assets section below
          2. Extract to `custom_components/meraki_dashboard/` in your Home Assistant config directory
          3. Restart Home Assistant

          ## Contributors

          Thanks to all contributors who made this release possible! 🎉
          EOF

          echo "Generated release notes:"
          cat /tmp/release_notes.md

          # Save version and notes for next step
          echo "TARGET_VERSION=$TARGET_VERSION" >> $GITHUB_OUTPUT
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          cat /tmp/release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create or update draft release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the target version from the previous step output
          TARGET_VERSION="${{ steps.generate_notes.outputs.TARGET_VERSION }}"
          TAG_NAME="v$TARGET_VERSION"

          # Validate tag format before proceeding
          if ! [[ "$TAG_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid tag format: $TAG_NAME"
            exit 1
          fi

          # Check if ANY release (draft or published) already exists with this tag
          EXISTING_RELEASE=$(gh release list --limit 50 | grep "^$TAG_NAME" | head -1 | cut -f1 || echo "")

          if [ -n "$EXISTING_RELEASE" ]; then
            # Check if it's a draft
            IS_DRAFT=$(gh release view "$TAG_NAME" --json isDraft --jq '.isDraft')
            if [ "$IS_DRAFT" = "true" ]; then
              echo "Updating existing draft release: $TAG_NAME"
              gh release edit "$TAG_NAME" --notes-file /tmp/release_notes.md --title "Release $TAG_NAME"
              echo "✅ Updated draft release $TAG_NAME with new release notes"
            else
              echo "Release $TAG_NAME already exists and is published. Skipping update."
              echo "✅ Skipped updating published release $TAG_NAME"
            fi
          else
            # Find a unique version number if needed
            COUNTER=0
            ORIGINAL_VERSION="$TARGET_VERSION"
            while gh release view "v$TARGET_VERSION" >/dev/null 2>&1; do
              COUNTER=$((COUNTER + 1))
              IFS='.' read -r major minor patch <<< "$ORIGINAL_VERSION"
              NEW_PATCH=$((patch + COUNTER))
              TARGET_VERSION="$major.$minor.$NEW_PATCH"
              echo "Tag v$ORIGINAL_VERSION exists, trying v$TARGET_VERSION"
            done

            TAG_NAME="v$TARGET_VERSION"
            echo "Creating new draft release: $TAG_NAME"
            gh release create "$TAG_NAME" --draft --title "Release $TAG_NAME" --notes-file /tmp/release_notes.md
            echo "✅ Created new draft release $TAG_NAME"
          fi

          # Output the final tag name
          echo "Created/Updated release: $TAG_NAME"
